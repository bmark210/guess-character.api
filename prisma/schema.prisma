datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =========== Enums ===========
enum CharacterType {
  PERSON
  ENTITY
  FOOD
  OBJECT
  PLACE
}

enum Book {
  GENESIS
  EXODUS
  NUMBERS
  JOSHUA
  JUDGES
  RUTH
  ONE_SAMUEL
  TWO_SAMUEL
  ONE_KINGS
  TWO_KINGS
  ONE_CHRONICLES
  TWO_CHRONICLES
  EZRA
  NEHEMIAH
  ESTHER
  DANIEL
  MATTHEW
  MARK
  LUKE
  JOHN
  ACTS
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SocialStatus {
  AUTHORITY
  SPIRITUAL_LEADER
  TEACHER
  SERVANT_CLASS
  LABORER
  HEALER
  MARGINALIZED
  FOREIGNER
  CITIZEN
  PRISONER
  RIGHTEOUS
  SINNER
  SYMBOLIC_ROLE
  UNKNOWN
}

enum EntityType {
  ANIMAL
  BIRD
  FISH
  INSECT
  PLANT
  ANGELIC_BEING
  MYTHICAL_BEAST
  SUPERNATURAL
  OTHER
}

enum FoodType {
  PLANT_BASED
  ANIMAL_BASED
  COOKED
  RAW
  LIQUID
  RITUAL
  PRESERVED
  COMMON
  LUXURY
  SYMBOLIC
  OTHER
}

enum Material {
  ORGANIC
  MINERAL
  METALLIC
  TEXTILE
  PRECIOUS
  LIQUID_BASED
  EARTH_BASED
  UNKNOWN
  OTHER
}

enum ObjectUsage {
  FUNCTIONAL
  REPRESENTATIONAL
  SACRED
  COMMUNICATIVE
  SUPPORTIVE
  AESTHETIC
  UNKNOWN
  OTHER
}

enum PlaceType {
  NATURAL_FEATURE
  SETTLEMENT
  WILDERNESS
  SACRED_PLACE
  REGION
  PATHWAY
  SYMBOLIC_PLACE
  OTHER
}

enum GameStatus {
  WAITING_FOR_PLAYERS
  IN_PROGRESS
  FINISHED
}

model BaseEntity {
  id          String        @id @default(uuid())
  name        String
  description String
  book        Book
  chapter     Int           @default(1)
  verse       Int           @default(1)
  image       String
  type        CharacterType
  level       Difficulty

  // One-to-one relations with child models
  person     Person?
  entity     Entity?
  foodItem   FoodItem?
  objectItem ObjectItem?
  place      Place?
  rounds     Round[]

  @@map("base_entities")
}

model Person {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id], onDelete: Cascade)

  traits String[]      @default([])
  status SocialStatus?

  @@map("people")
}

model Entity {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id], onDelete: Cascade)

  entityType EntityType?

  @@map("entities")
}

model FoodItem {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id], onDelete: Cascade)

  foodType FoodType?

  @@map("food_items")
}

model ObjectItem {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id], onDelete: Cascade)

  material Material?
  usage    ObjectUsage?

  @@map("object_items")
}

model Place {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id], onDelete: Cascade)

  placeType PlaceType?

  @@map("places")
}

model GameSession {
  id        String     @id @default(uuid())
  code      String     @unique
  creatorId String
  createdAt DateTime   @default(now())
  status    GameStatus @default(WAITING_FOR_PLAYERS)

  // Game settings
  difficulty     Difficulty
  characterTypes CharacterType[]
  books          Book[]

  players Player[]
  rounds  Round[]
}

model Player {
  id         String @id @default(uuid())
  name       String
  avatarUrl  String
  telegramId String @unique

  sessionId String?
  session   GameSession? @relation(fields: [sessionId], references: [id])
  rounds    Round[]
}

model Round {
  id          String @id @default(uuid())
  sessionId   String
  playerId    String
  characterId String

  session   GameSession @relation(fields: [sessionId], references: [id])
  player    Player      @relation(fields: [playerId], references: [id])
  character BaseEntity  @relation(fields: [characterId], references: [id])
}
