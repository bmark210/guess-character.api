generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_ORIGIN_URL")
}

model BaseEntity {
  id                      String                 @id @default(uuid())
  name                    String
  nameEn                  String?
  numberType              NumberType             @default(SINGULAR)
  description             String
  chapter                 Int                    @default(1)
  verse                   Int                    @default(1)
  image                   String?
  type                    CharacterType
  level                   Difficulty
  book                    Book
  relatedCharacterId      String?
  assignments             Assignment[]
  entity                  Entity?
  foodItem                FoodItem?
  objectItem              ObjectItem?
  person                  Person?
  place                   Place?
  HandbookBook            HandbookBook?          @relation(fields: [handbookBookId], references: [id])
  handbookBookId          String?
  HandbookCharacterType   HandbookCharacterType? @relation(fields: [handbookCharacterTypeId], references: [id])
  handbookCharacterTypeId String?
  HandbookDifficulty      HandbookDifficulty?    @relation(fields: [handbookDifficultyId], references: [id])
  handbookDifficultyId    String?

  @@map("base_entities")
}

model Person {
  baseId String        @id
  traits String[]
  status SocialStatus?
  base   BaseEntity    @relation(fields: [baseId], references: [id], onDelete: Cascade)

  @@map("people")
}

model Entity {
  baseId     String      @id
  entityType EntityType?
  base       BaseEntity  @relation(fields: [baseId], references: [id], onDelete: Cascade)

  @@map("entities")
}

model FoodItem {
  baseId   String     @id
  foodType FoodType?
  base     BaseEntity @relation(fields: [baseId], references: [id], onDelete: Cascade)

  @@map("food_items")
}

model ObjectItem {
  baseId   String       @id
  material Material?
  usage    ObjectUsage?
  size     Size?
  base     BaseEntity   @relation(fields: [baseId], references: [id], onDelete: Cascade)

  @@map("object_items")
}

model Place {
  baseId    String     @id
  placeType PlaceType?
  base      BaseEntity @relation(fields: [baseId], references: [id], onDelete: Cascade)

  @@map("places")
}

model GameSession {
  id             String          @id @default(uuid())
  code           String          @unique
  creatorId      String
  createdAt      DateTime        @default(now())
  status         GameStatus      @default(WAITING_FOR_PLAYERS)
  difficulty     Difficulty      @default(EASY)
  characterTypes CharacterType[]
  books          Book[]
  winners        String[]        @default([])
  assignments    Assignment[]
  players        Player[]
}

model Player {
  id          String       @id @default(uuid())
  name        String
  avatarUrl   String
  telegramId  String       @unique
  sessionId   String?
  rating      Int          @default(0)
  awardId     String?
  assignments Assignment[]
  award       Award?       @relation(fields: [awardId], references: [id])
  session     GameSession? @relation(fields: [sessionId], references: [id])

  @@map("players")
}

model Assignment {
  id          String      @id @default(uuid())
  sessionId   String
  playerId    String
  characterId String
  guess_tries Int         @default(0)
  isWinner    Boolean     @default(false)
  hints       HintLevel[] @default([])
  character   BaseEntity  @relation(fields: [characterId], references: [id])
  player      Player      @relation(fields: [playerId], references: [id])
  session     GameSession @relation(fields: [sessionId], references: [id])

  @@map("assignments")
}

model Award {
  id          String   @id @default(uuid())
  name        String
  description String
  raiting     Int
  color       String
  Player      Player[]

  @@map("awards")
}

model HandbookBook {
  id          String       @id @default(uuid())
  name        String
  description String
  image       String?
  baseEntity  BaseEntity[]

  @@map("books")
}

model HandbookCharacterType {
  id          String       @id @default(uuid())
  name        String
  description String
  image       String?
  baseEntity  BaseEntity[]

  @@map("character_types")
}

model HandbookDifficulty {
  id          String       @id @default(uuid())
  name        String
  description String
  image       String?
  baseEntity  BaseEntity[]

  @@map("difficulties")
}

enum CharacterType {
  PERSON
  ENTITY
  FOOD
  OBJECT
  PLACE
}

enum Book {
  GENESIS
  EXODUS
  NUMBERS
  JOSHUA
  JUDGES
  RUTH
  ONE_SAMUEL
  TWO_SAMUEL
  ONE_KINGS
  TWO_KINGS
  ONE_CHRONICLES
  TWO_CHRONICLES
  EZRA
  NEHEMIAH
  ESTHER
  DANIEL
  MATTHEW
  MARK
  LUKE
  JOHN
  ACTS
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SocialStatus {
  AUTHORITY
  SPIRITUAL_LEADER
  TEACHER
  SERVANT_CLASS
  LABORER
  HEALER
  MARGINALIZED
  FOREIGNER
  CITIZEN
  PRISONER
  RIGHTEOUS
  SINNER
  SYMBOLIC_ROLE
  UNKNOWN
}

enum EntityType {
  ANIMAL
  BIRD
  FISH
  INSECT
  PLANT
  ANGELIC_BEING
  MYTHICAL_BEAST
  SUPERNATURAL
  OTHER
}

enum FoodType {
  PLANT_BASED
  ANIMAL_BASED
  COOKED
  RAW
  LIQUID
  RITUAL
  PRESERVED
  COMMON
  LUXURY
  SYMBOLIC
  OTHER
}

enum Material {
  ORGANIC
  MINERAL
  METALLIC
  TEXTILE
  PRECIOUS
  LIQUID_BASED
  EARTH_BASED
  CERAMIC
  WOODEN
  STONE
  GLASS
  PAPER
  LEATHER
  BONE
  SHELL
  COMPOSITE
  UNKNOWN
  OTHER
}

enum ObjectUsage {
  FUNCTIONAL
  REPRESENTATIONAL
  SACRED
  COMMUNICATIVE
  SUPPORTIVE
  AESTHETIC
  UNKNOWN
  OTHER
}

enum Size {
  SMALL
  MEDIUM
  LARGE
  HUGE
}

enum PlaceType {
  NATURAL_FEATURE
  SETTLEMENT
  WILDERNESS
  SACRED_PLACE
  REGION
  PATHWAY
  SYMBOLIC_PLACE
  OTHER
}

enum GameStatus {
  WAITING_FOR_PLAYERS
  IN_PROGRESS
  FINISHED
}

enum HintLevel {
  ONE
  TWO
  THREE
  FOUR
}

enum NumberType {
  SINGULAR
  PLURAL
}
