datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// =========== Enums ===========
enum CharacterType {
  PERSON
  ENTITY
  FOOD
  OBJECT
  PLACE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum SocialStatus {
  AUTHORITY
  SPIRITUAL_LEADER
  TEACHER
  SERVANT_CLASS
  LABORER
  HEALER
  MARGINALIZED
  FOREIGNER
  CITIZEN
  PRISONER
  RIGHTEOUS
  SINNER
  SYMBOLIC_ROLE
  UNKNOWN
}

enum EntityType {
  ANIMAL
  BIRD
  FISH
  INSECT
  PLANT
  ANGELIC_BEING
  MYTHICAL_BEAST
  SUPERNATURAL
  OTHER
}

enum FoodType {
  PLANT_BASED
  ANIMAL_BASED
  COOKED
  RAW
  LIQUID
  RITUAL
  PRESERVED
  COMMON
  LUXURY
  SYMBOLIC
  OTHER
}

enum Material {
  ORGANIC
  MINERAL
  METALLIC
  TEXTILE
  PRECIOUS
  LIQUID_BASED
  EARTH_BASED
  UNKNOWN
  OTHER
}

enum ObjectUsage {
  FUNCTIONAL
  REPRESENTATIONAL
  SACRED
  COMMUNICATIVE
  SUPPORTIVE
  AESTHETIC
  UNKNOWN
  OTHER
}

enum PlaceType {
  NATURAL_FEATURE
  SETTLEMENT
  WILDERNESS
  SACRED_PLACE
  REGION
  PATHWAY
  SYMBOLIC_PLACE
  OTHER
}

// ========== BaseEntity ==========
//
// Stores shared fields for any "character" type.
//
model BaseEntity {
  id          String        @id @default(uuid())
  name        String
  description String
  mention     String
  type        CharacterType
  level       Difficulty

  // One-to-one relations with child models
  person     Person?
  entity     Entity?
  foodItem   FoodItem?
  objectItem ObjectItem?
  place      Place?

  @@map("base_entities")
}

// ========== Person ==========
//
// Only for type = PERSON.
//
model Person {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id])

  traits String[]      @default([])
  status SocialStatus?

  @@map("people")
}

// ========== Entity ==========
//
// Only for type = ENTITY.
//
model Entity {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id])

  entityType EntityType?

  @@map("entities")
}

// ========== FoodItem ==========
//
// Only for type = FOOD.
//
model FoodItem {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id])

  foodType FoodType?

  @@map("food_items")
}

// ========== ObjectItem ==========
//
// Only for type = OBJECT.
//
model ObjectItem {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id])

  material Material?
  usage    ObjectUsage?

  @@map("object_items")
}

// ========== Place ==========
//
// Only for type = PLACE.
//
model Place {
  baseId String     @id
  base   BaseEntity @relation(fields: [baseId], references: [id])

  placeType PlaceType?

  @@map("places")
}
